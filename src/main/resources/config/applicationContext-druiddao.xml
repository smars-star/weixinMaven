<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">  
                        
    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:druidjdbc.properties" />  
    </bean>  
  
    <!-- 这里使用了druid的连接池，可以看做是用来建立和数据库的连接的，具体好处可以自行百度 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  
        destroy-method="close">  
        <property name="url" value="${url}" />  
        <property name="driverClassName" value="${driverClassName}" />  
        <property name="username" value="${username}" />  
        <property name="password" value="${password}" />  
        <property name="filters" value="${filters}" />  
        
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${initialSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${maxActive}"></property>  
        <!-- 连接池最大空闲 
        <property name="maxIdle" value="${maxIdle}"></property>  -->  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${maxWait}"></property>  
        
        
        <property name="maxOpenPreparedStatements"   value="${maxOpenPreparedStatements}" />  
        <!-- 打开removeAbandoned功能 -->  
        <property name="removeAbandoned" value="${removeAbandoned}" /> 
        <!-- 1800秒，也就是30分钟 -->  
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" /> 
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="${logAbandoned}" /> 
          
    </bean>  
  
    <!-- spring和MyBatis整合,扫描目录下的mybatis配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
    
         <!-- 当mybatis的xml文件和mapper接口不在相同包下时，需要用mapperLocations属性指定xml文件的路径。  
         *是个通配符，代表所有的文件，**代表所有目录下 -->  
         
         <!-- 这里加载Mybatis的配置文件 -->
        <property name="dataSource" ref="dataSource" />  
         <property name="configLocation" value="classpath:config/sqlMapping.xml"></property>
        <!-- 自动扫描mapping.xml文件 -->  
         <property name="mapperLocations"  value="classpath:com/application/**/dao/sqlmap/*.xml"></property>  
    </bean>
  
    <!-- DAO接口所在包,Spring会查找其下的类,用来和mapper.xml对应起来  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  --> 
         <!-- 扫描包路径，如果需要扫描多个包中间用半角逗号隔开 
        <property name="basePackage" value="gds.com.common.dao.BaseDao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  -->
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>

  
    <!-- 事务管理     -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  

    
     <!-- jdbcTemplate
    <bean id="jdbc" class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource">  
            <ref bean="dataSource" />  
        </property>  
    </bean>  
  
    <bean id="SpringTableOperatorBean" class="com.whyun.druid.model.TableOperator"  
        scope="prototype">  
        <property name="dataSource">  
            <ref bean="dataSource" />  
        </property>  
    </bean> 
  -->  
  
  
</beans>  